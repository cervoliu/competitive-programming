{
	// Place your contest workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"fast IO": {
		"scope": "cpp",
		"prefix": "fastio",
		"body": [
			"namespace IO {",
			"    #define isdigit(x) (x >= '0' && x <= '9')",
			"    template <typename T>",
			"    T read() {",
			"        T sum = 0, flag = 1;",
			"        int ch = getchar();",
			"        for (; !isdigit(ch); ch = getchar())",
			"            if (ch == '-') flag = -1;",
			"        for (; isdigit(ch); ch = getchar()) sum = sum * 10 + ch - '0';",
			"        return sum * flag;",
			"    }",
			"    string read() {",
			"        string res = \"\";",
			"        int ch = getchar();",
			"        for (int ch = getchar(); ch != EOF && ch != '\\n' && ch != ' '; ch = getchar())",
			"            res += ch;",
			"        return res;",
			"    }",
			"    string readline() {",
			"        string res = \"\";",
			"        int ch = getchar();",
			"        for (int ch = getchar(); ch != EOF && ch != '\\n'; ch = getchar())",
			"            res += ch;",
			"        return res;",
			"    }",
			"    template <typename T>",
			"    void write(T x) {",
			"        if (x < 0) putchar('-'), x = -x;",
			"        if (x > 9) write(x / 10);",
			"        putchar(x % 10 + '0');",
			"    }",
			"    #undef isdigit",
			"}"
		]
	},
}